'use client';

import { useState, useEffect } from 'react';

export function SSEDebugger() {
  const [logs, setLogs] = useState<string[]>([]);
  const [connectionTest, setConnectionTest] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');

  const testSSEConnection = async () => {
    setConnectionTest('testing');
    setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] SSE 연결 테스트 시작...`]);

    // 먼저 기본 API 엔드포인트 테스트
    try {
      const testResponse = await fetch('/api/test');
      const testData = await testResponse.json();
      setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] API 테스트 성공: ${testData.message}`]);
    } catch (error) {
      setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] API 테스트 실패: ${error}`]);
    }

    try {
      const eventSource = new EventSource('/api/stream');
      
      let hasReceivedData = false;
      const timeout = setTimeout(() => {
        if (!hasReceivedData) {
          eventSource.close();
          setConnectionTest('error');
          setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 타임아웃: 10초 내 데이터 수신 실패`]);
        }
      }, 10000);

      eventSource.onopen = (event) => {
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] SSE 연결 성공 - readyState: ${eventSource.readyState}`]);
      };

      eventSource.onmessage = (event) => {
        hasReceivedData = true;
        clearTimeout(timeout);
        setConnectionTest('success');
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 데이터 수신 성공!`]);
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 데이터: ${event.data.slice(0, 200)}...`]);
        
        setTimeout(() => {
          eventSource.close();
        }, 1000);
      };

      eventSource.onerror = (error) => {
        clearTimeout(timeout);
        setConnectionTest('error');
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] SSE 오류 발생!`]);
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] - readyState: ${eventSource.readyState}`]);
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] - url: ${eventSource.url}`]);
        eventSource.close();
      };

    } catch (error) {
      setConnectionTest('error');
      setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 연결 생성 실패: ${error}`]);
    }
  };

  const testSimpleSSE = async () => {
    setConnectionTest('testing');
    setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 간단한 SSE 테스트 시작...`]);

    try {
      const eventSource = new EventSource('/api/stream-test');
      
      const timeout = setTimeout(() => {
        eventSource.close();
        setConnectionTest('error');
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 간단한 SSE 테스트 타임아웃`]);
      }, 5000);

      eventSource.onopen = () => {
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 간단한 SSE 연결 성공!`]);
      };

      eventSource.onmessage = (event) => {
        clearTimeout(timeout);
        setConnectionTest('success');
        const data = JSON.parse(event.data);
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 받은 메시지: ${data.message}`]);
        
        if (data.type === 'close') {
          eventSource.close();
        }
      };

      eventSource.onerror = () => {
        clearTimeout(timeout);
        setConnectionTest('error');
        setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 간단한 SSE 오류 발생`]);
        eventSource.close();
      };

    } catch (error) {
      setConnectionTest('error');
      setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] 간단한 SSE 생성 실패: ${error}`]);
    }
  };

  const clearLogs = () => {
    setLogs([]);
    setConnectionTest('idle');
  };
  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  return (
    <div className="mb-4 p-4 bg-gray-100 rounded-lg border border-gray-300">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-sm font-medium text-gray-700">🔧 SSE 디버거 (개발용)</h3>
        <div className="flex space-x-2">
          <button
            onClick={testSSEConnection}
            disabled={connectionTest === 'testing'}
            className={`px-3 py-1 text-xs rounded ${
              connectionTest === 'testing' 
                ? 'bg-yellow-200 text-yellow-700' 
                : connectionTest === 'success'
                ? 'bg-green-200 text-green-700'
                : connectionTest === 'error'
                ? 'bg-red-200 text-red-700'
                : 'bg-blue-200 text-blue-700 hover:bg-blue-300'
            }`}
          >
            {connectionTest === 'testing' ? '테스트 중...' : 'SSE 연결 테스트'}
          </button>
          <button
            onClick={testSimpleSSE}
            disabled={connectionTest === 'testing'}
            className="px-3 py-1 text-xs rounded bg-green-200 text-green-700 hover:bg-green-300"
          >
            간단한 SSE 테스트
          </button>
          <button
            onClick={clearLogs}
            className="px-3 py-1 text-xs rounded bg-gray-200 text-gray-700 hover:bg-gray-300"
          >
            로그 클리어
          </button>
        </div>
      </div>

      {logs.length > 0 && (
        <div className="bg-white p-2 rounded border text-xs font-mono max-h-32 overflow-y-auto">
          {logs.map((log, index) => (
            <div key={index} className="mb-1 text-gray-800">
              {log}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}